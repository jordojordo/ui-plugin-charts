(("undefined"!==typeof self?self:this)["webpackJsonpkubewarden_0_1_7"]=("undefined"!==typeof self?self:this)["webpackJsonpkubewarden_0_1_7"]||[]).push([[1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],{"016f":function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.isCreate?a("Create",{attrs:{value:e.value,mode:e.mode}}):a("CruResource",{attrs:{resource:e.value,mode:e.realMode,errors:e.errors},on:{finish:e.finish}},[a("Config",{attrs:{value:e.value,mode:e.mode}})],1)},i=[],o=a("da25"),r=a("305c"),n=a("fd5f"),l=a("90cd"),u=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.$fetchState.pending?a("Loading",{attrs:{mode:"relative"}}):a("Values",{attrs:{value:e.value,"chart-values":e.chartValues,"yaml-values":e.yamlValues,mode:e.mode}})},p=[],c=a("c5e6"),d=a("15ca"),f=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("div",{staticClass:"scroll__container"},[a("div",{staticClass:"scroll__content"},[a("Tabbed",{ref:"tabs",staticClass:"step__values__content",attrs:{"side-tabs":!0},on:{changed:function(t){return e.tabChanged(t)}}},[a(e.valuesComponent,{tag:"component",attrs:{mode:e.mode},model:{value:e.chartValues,callback:function(t){e.chartValues=t},expression:"chartValues"}})],1)],1)])])},h=[],b=a("0cb2"),m={name:"Values",props:{mode:{type:String,default:o["u"]},chartValues:{type:Object,required:!0},value:{type:Object,required:!0}},components:{Tabbed:b["a"]},async fetch(){try{await this.loadValuesComponent()}catch(e){console.error("Error loading values component: "+e)}},data(){return{showQuestions:!0,showValuesComponent:!1,valuesComponent:null}},computed:{isCreate(){return this.mode===o["u"]}},methods:{async loadValuesComponent(){this.value.haveComponent("kubewarden/policy-server")&&(this.valuesComponent=this.value.importComponent("kubewarden/policy-server"),await this.valuesComponent(),this.showValuesComponent=!0)},tabChanged(){window.scrollTop=0}}},v=m,g=(a("8766"),a("d802")),y=Object(g["a"])(v,f,h,!1,null,"56b7c1bc",null),w=y.exports,_={name:"Config",props:{mode:{type:String,default:o["C"]},value:{type:Object,required:!0}},components:{Loading:d["a"],Values:w},fetch(){this.value&&(this.chartValues={questions:this.value},this.yamlValues=Object(c["c"])(this.value))},data(){return{chartValues:null,yamlValues:null}}},x=_,S=Object(g["a"])(x,u,p,!1,null,null,null),k=S.exports,A=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.$fetchState.pending?a("Loading",{attrs:{mode:"relative"}}):a("CruResource",{attrs:{resource:e.value,mode:e.realMode,"done-route":e.doneRoute,errors:e.errors,"generate-yaml":e.generateYaml},on:{finish:e.finish,error:e.clearErrors}},[a("Values",{attrs:{value:e.value,"chart-values":e.chartValues,mode:e.mode}})],1)},O=[],R=a("736a"),C=a.n(R),V=a("1fcb"),M=a.n(V),j=a("907c"),P=a("e24b"),q=a("6f75"),N={name:"Create",props:{mode:{type:String,default:o["u"]},value:{type:Object,required:!0}},components:{Loading:d["a"],Values:w,CruResource:n["a"]},mixins:[r["a"]],fetch(){var e,t,a,s,i,o;this.errors=[];const r=C()(JSON.parse(JSON.stringify(q)));this.chartValues={questions:r},this.value.apiVersion=`${null===(e=this.schema)||void 0===e||null===(t=e.attributes)||void 0===t?void 0:t.group}.${null===(a=this.schema)||void 0===a||null===(s=a.attributes)||void 0===s?void 0:s.version}`,this.value.kind=null===(i=this.schema)||void 0===i||null===(o=i.attributes)||void 0===o?void 0:o.kind},data(){return{errors:null,chartValues:null}},methods:{clearErrors(){this.errors=[]},async finish(e){try{var t;M()(this.value,null===(t=this.chartValues)||void 0===t?void 0:t.questions),await this.save(e)}catch(a){this.errors.push(a)}},generateYaml(){var e;const t=this.$store.getters["currentStore"](this.value),a=this.$store.getters[t+"/all"](j["y"]),s=null!==(e=this.chartValues)&&void 0!==e&&e.questions?Object(P["e"])(this.chartValues.questions):this.value,i=Object(c["b"])(a,this.value.type,s);return i}}},T=N,E=Object(g["a"])(T,A,O,!1,null,null,null),I=E.exports,D={components:{CruResource:n["a"],Config:k,Create:I},mixins:[r["a"]],props:{mode:{type:String,default:o["w"]},realMode:{type:String,default:o["w"]},value:{type:Object,required:!0}},async fetch(){this.errors=[],await this.$store.getters["cluster/schemaFor"](l["a"].POLICY_SERVER)},data(){return{errors:null}},computed:{isCreate(){return this.realMode===o["u"]}},methods:{async finish(e){try{await this.save(e)}catch(t){this.errors.push(t)}}}},J=D,L=Object(g["a"])(J,s,i,!1,null,null,null);t["default"]=L.exports},"0398":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"disallow-service-nodeport"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/disallow-service-nodeport:v0.1.2","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false}}')},"040c":function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy validates the annotations of generic Kubernetes objects. It rejects all the resources that use one or more annotations on the deny list. It also allows you to put constraints on specific annotations. The constraints are expressed as regular expression.","group":"Settings","required":false,"target":false,"type":"map","variable":"description"},{"default":[],"tooltip":"A list of annotations that cannot be used","group":"Settings","label":"Denied annotations","required":false,"type":"array[","variable":"denied_annotations"},{"default":[],"tooltip":"Annotations that are validated with user-defined RegExp","group":"Settings","label":"Constrained annotations","target":true,"type":"map[","variable":"constrained_annotations"}]')},"0e27":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"selinux-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/selinux-psp:v0.1.5","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"MustRunAs":[{}],"RunAsAny":false}}}')},1:function(e,t){},1041:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"safe-labels"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/safe-labels:v0.1.7","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"denied_labels":[""],"mandatory_labels":[""],"constrained_labels":[{}]}}}')},"13c1":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"disallow-service-loadbalancer"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/disallow-service-loadbalancer:v0.1.3","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false}}')},1517:function(e){e.exports=JSON.parse('[{"default":[],"description":"This policy works by defining a whitelist of allowed AppArmor profiles. Pods are then inspected at creation and update time, to ensure only approved profiles are used. When no AppArmor profile is defined, Kubernetes will leave the final choice to the underlying container runtime. This will result in using the default AppArmor profile provided by Container Runtime. Because of that, the default behaviour of this policy is to accept workloads that do not have an AppArmor profile specified.","tooltip":"Provide a list of allowed AppArmor profiles","group":"Settings","label":"Allowed profiles","required":false,"type":"array[","variable":"allowed_profiles"}]')},1912:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"hostpaths-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/hostpaths-psp:v0.1.5","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowedHostPaths":[{"pathPrefix":"","readOnly":false}]}}}')},"1b4b":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"capabilities-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/capabilities-psp:v0.1.9","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowed_capabilities":[""],"required_drop_capabilities":[""],"default_add_capabilities":[""]}}}')},"1dc0":function(e,t,a){var s=a("c44b");s.__esModule&&(s=s.default),"string"===typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var i=a("0ed3").default;i("0e68c201",s,!0,{sourceMap:!1,shadowMode:!1})},2:function(e,t){},2275:function(e,t,a){var s={"./allow-privilege-escalation-psp.json":"c250","./allowed-fsgroups-psp.json":"cd09","./allowed-proc-mount-types-psp.json":"3337","./apparmor-psp.json":"1517","./capabilities-psp.json":"5249","./flexvolume-drivers-psp.json":"6d86","./host-namespaces-psp.json":"ba38","./hostpaths-psp.json":"4234","./ingress.json":"6038","./pod-runtime.json":"679c","./safe-annotations.json":"040c","./safe-labels.json":"37ac","./seccomp-psp.json":"8a41","./selinux-psp.json":"bad1","./sysctl-psp.json":"3fdc","./trusted-repos.json":"8ea3","./user-group-psp.json":"c3e9","./verify-image-signatures.json":"d047","./volumes-psp.json":"a5f5"};function i(e){var t=o(e);return a(t)}function o(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}i.keys=function(){return Object.keys(s)},i.resolve=o,e.exports=i,i.id="2275"},"2d7c":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"apparmor-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/apparmor-psp:v0.1.9","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowed_profiles":[""]}}}')},"2f5e":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"environment-variable-secrets-scanner"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/env-variable-secrets-scanner-policy:v0.1.0","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{}}}')},"317e":function(e,t,a){var s=a("a3b9");s.__esModule&&(s=s.default),"string"===typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var i=a("0ed3").default;i("b5221db2",s,!0,{sourceMap:!1,shadowMode:!1})},3337:function(e){e.exports=JSON.parse('[{"default":true,"description":"This policy works by defining what proc mount types are allowed in containers. They can be empty (defaulted by Kubernetes), `Default` or `Unmasked`. This policy protects against pods that contain at least one container with the `Unmasked` proc mount type, that can potentially expose host information to the container.","tooltip":"Allows the containers, init containers, or ephemeral containers within a pod to set `.spec.securityContext.procMount` to Unmasked. Otherwise, the pod or the ephemeral request subresource request will be rejected.","group":"Settings","label":"Allow unmasked proc mount type","required":false,"type":"boolean","variable":"allow_unmasked_proc_mount_type"}]')},"360f":function(e,t,a){var s={"./allow-privilege-escalation-psp.json":"7ed5","./allowed-fsgroups-psp.json":"bb31","./allowed-proc-mount-types-psp.json":"9391","./apparmor-psp.json":"2d7c","./capabilities-psp.json":"1b4b","./defaultPolicy.json":"9450","./disallow-service-loadbalancer.json":"13c1","./disallow-service-nodeport.json":"0398","./environment-variable-policy.json":"c8f2","./environment-variable-secrets-scanner.json":"2f5e","./flexvolume-drivers-psp.json":"866c","./host-namespaces-psp.json":"dbe7","./hostpaths-psp.json":"1912","./ingress.json":"dda8d","./pod-privileged-policy.json":"56c0","./pod-runtime.json":"a779","./readonly-root-filesystem-psp.json":"b063","./safe-annotations.json":"cf89","./safe-labels.json":"1041","./seccomp-psp.json":"b275","./selinux-psp.json":"0e27","./sysctl-psp.json":"c9dd","./trusted-repos.json":"94f8","./user-group-psp.json":"4f8a","./verify-image-signatures.json":"57a2","./volumes-psp.json":"d1d7"};function i(e){var t=o(e);return a(t)}function o(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}i.keys=function(){return Object.keys(s)},i.resolve=o,e.exports=i,i.id="360f"},"37ac":function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy validates the labels of generic Kubernetes objects. It rejects all the resources that use one or more labels on the deny list. It also allows you to put constraints on specific labels. The constraints are expressed as regular expression. It will also allow you to require specific labels to be part of the resource.","group":"Settings","required":false,"target":false,"type":"map","variable":"description"},{"default":[],"description":"A list of labels that cannot be used","group":"Settings","label":"Denied labels","required":false,"type":"array[","variable":"denied_labels"},{"default":[],"description":"A list of labels that must be defined","group":"Settings","label":"Mandatory labels","required":false,"type":"array[","variable":"mandatory_labels"},{"default":[],"tooltip":"Annotations that are validated with user-defined RegExp","group":"Settings","label":"Constrained labels","target":true,"type":"map[","variable":"constrained_labels"}]')},"3f62":function(e,t,a){var s=a("f91a");s.__esModule&&(s=s.default),"string"===typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var i=a("0ed3").default;i("1a765d36",s,!0,{sourceMap:!1,shadowMode:!1})},"3fdc":function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy validates which sysctls can get set in pods by specifying lists of sysctls or sysctl patterns to be allowed or forbidden. You can then modify the securityContext of Pods to make use of the Sysctls as permitted by this policy.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":[],"description":"A list of plain sysctl names or sysctl patterns (which end with *) to be forbidden. You can forbid a combination of safe and unsafe sysctls in the list. To forbid setting any sysctls, use * on its own.","group":"Settings","label":"Forbidden sysctls","required":false,"type":"array[","variable":"forbiddenSysctls"},{"default":[],"description":"A list of plain sysctl names that can be used in Pods. * cannot be used. Has precedence over forbiddenSysctls.","group":"Settings","label":"Allowed unsafe sysctls","required":false,"type":"array[","variable":"allowedUnsafeSysctls"}]')},4234:function(e){e.exports=JSON.parse('[{"default":[],"description":"This policy is a replacement for the Kubernetes Pod Security Policy that controls the usage of `hostPath` volumes. The policy inspects both the containers and the init containers that are using `hostPath` volumes. `allowedHostPaths` is a list of host paths that are allowed to be used by hostPath volumes. An empty `allowedHostPaths` list means there is no restriction on host paths used. Each entry of `allowedHostPaths` must have: a `pathPrefix` field, which allows hostPath volumes to mount a path that begins with an allowed prefix, and a `readOnly` field indicating it must be mounted read-only.","tooltip":"A list of host paths that are allowed to be used by hostPath volumes.","group":"Settings","label":"Allow host path","target":false,"type":"map","variable":"allowedHostPaths","subquestions":[{"default":"","description":"Allows hostPath volumes to mount a path that begins with an allowed prefix.","group":"Settings","label":"Path prefix","type":"string","variable":"allowedHostPaths.pathPrefix"},{"default":false,"tooltip":"Indicates if the volume must be mounted read-only.","group":"Settings","label":"Read only","type":"boolean","variable":"allowedHostPaths.readOnly"}]}]')},"4e08":function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.isCreate?a("Create",{attrs:{value:e.value,mode:e.mode}}):a("CruResource",{attrs:{resource:e.value,mode:e.realMode},on:{finish:e.finish}},[a("Config",{attrs:{value:e.value,mode:e.mode}})],1)},i=[],o=a("da25"),r=a("42b0"),n=a("305c"),l=a("fd5f"),u=a("edaa"),p=a("ad18"),c={name:"AdmissionPolicy",props:{value:{type:Object,required:!0},mode:{type:String,default:o["w"]},realMode:{type:String,default:o["w"]}},components:{CruResource:l["a"],Config:u["a"],Create:p["a"]},mixins:[r["a"],n["a"]],async fetch(){await this.fetchChart()},provide(){return{chartType:this.value.type}},computed:{isCreate(){return this.realMode===o["u"]}},methods:{async finish(e){try{await this.save(e)}catch(t){this.errors.push(t)}}}},d=c,f=a("d802"),h=Object(f["a"])(d,s,i,!1,null,null,null);t["default"]=h.exports},"4f8a":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"user-group-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/user-group-psp:v0.2.0","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"run_as_user":{"rule":"","overwrite":false,"ranges":[{"min":0,"max":0}]},"run_as_group":{"rule":"","overwrite":false,"ranges":[{"min":0,"max":0}]},"supplemental_groups":{"rule":"","overwrite":false,"ranges":[{"min":0,"max":0}]}}}}')},5249:function(e){e.exports=JSON.parse('[{"default":[],"description":"Provides a list of capabilities that are allowed to be added to a container","tooltip":"Specified as the capability name in ALL_CAPS. (e.g. `CHOWN`, `KILL`)","group":"Settings","label":"Allowed capabilities","required":false,"type":"array[","variable":"allowed_capabilities"},{"default":[],"description":"The capabilities which must be dropped from containers.","tooltip":"Specified as the capability name in ALL_CAPS. (e.g. `NET_ADMIN`)","group":"Settings","label":"Required drop capabilities","required":false,"type":"array[","variable":"required_drop_capabilities"},{"default":[],"description":"The capabilities which are added to containers by default, in addition to the runtime defaults.","tooltip":"Specified as the capability name in ALL_CAPS. (e.g. `CHOWN`)","group":"Settings","label":"Default add capabilities","required":false,"type":"array[","variable":"default_add_capabilities"}]')},"56c0":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"pod-privileged-policy"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/pod-privileged:v0.1.10","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{}}}')},"57a2":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"verify-image-signatures"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/verify-image-signatures:v0.1.2","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"modifyImagesWithDigest":true,"signatures":[{"image":"","pubKeys":[""],"annotations":[{}]},{"image":"","keyless":[{"issuer":"","subject":""}],"annotations":[{}]}]}}}')},6038:function(e){e.exports=JSON.parse('[{"default":false,"description":"This policy allows you to restrict ingress resources.","tooltip":"Whether the spec for ingress resources has to include a TLS attribute that includes all hosts defined in the .spec.rules attribute of the ingress resource.","group":"Settings","label":"Require TLS","required":false,"type":"boolean","variable":"requireTLS"},{"default":[],"description":"A list of allowed ports inside `.spec.rules.paths.backend.service.port`. If this array contains at least one port, any other port will be rejected.","group":"Settings","label":"Allow ports","required":false,"type":"array[","variable":"allowPorts"},{"default":[],"description":"A list of denied ports inside `.spec.rules.paths.backend.service.port`. If any port matches a port on this array, the ingress resource will be rejected, otherwise it will be accepted.","group":"Settings","label":"Deny ports","required":false,"type":"array[","variable":"denyPorts"}]')},"604d":function(e,t,a){"use strict";a("317e")},"679c":function(e){e.exports=JSON.parse('[{"default":[],"description":"This policy can be used to inspect `CREATE` and `UPDATE` requests of `Pod` resources, and can be configured to replace a non-valid runtime with a fall-back one.","tooltip":"Give the explicit request to use a specific runtime.","group":"Settings","label":"Reserved Runtimes","required":false,"type":"array[","variable":"reservedRuntimes"},{"default":"","tooltip":"Replace a non-valid runtime with a fall-back.","group":"Settings","label":"Fallback runtime","required":false,"type":"string","variable":"fallbackRuntime"},{"default":true,"tooltip":"Prevent the usage of the default runtime.","group":"Settings","label":"Default runtime reserved","required":false,"type":"boolean","variable":"defaultRuntimeReserved"}]')},"6d86":function(e){e.exports=JSON.parse('[{"default":[],"description":"This policy provides a list of allowed Flex Volume drivers. If the pod to be evaluated has a different driver on any `flexVolume` volume, it will be rejected.","tooltip":"The `Key` needs to be `driver`, then provide a flex volume driver as the `Value`. (e.g. `driver: example/lvm`)","group":"Settings","label":"Allowed flex volumes","target":true,"type":"map[","variable":"allowed_flex_volumes"}]')},"6f75":function(e){e.exports=JSON.parse('{"apiVersion":"policies.kubewarden.io/v1alpha2","kind":"PolicyServer","metadata":{"annotations":{},"labels":{}},"spec":{"annotations":{},"env":[{"name":"KUBEWARDEN_ENABLE_METRICS","value":"1"},{"name":"KUBEWARDEN_LOG_FMT","value":"otlp"},{"name":"KUBEWARDEN_LOG_LEVEL","value":"info"}],"image":"ghcr.io/kubewarden/policy-server:latest","replicas":1,"serviceAccountName":"policy-server","verificationConfig":"","insecureSources":[],"sourceAuthorities":null}}')},"7ed5":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"allow-privilege-escalation-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/allow-privilege-escalation-psp:v0.1.11","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"default_allow_privilege_escalation":true}}}')},"866c":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"flexvolume-drivers-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/flexvolume-drivers-psp:v0.1.2","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowed_flex_volumes":[{}]}}}')},8766:function(e,t,a){"use strict";a("1dc0")},"87a0":function(e,t,a){"use strict";a("d72c")},"8a41":function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy provides a replacement for the Pod Security Policy that deals with seccomp profiles. Prior to Kubernetes 1.19, seccomp profiles could be defined only via Pod annotations. Starting from Kubernetes 1.19 the seccomp profiles can be managed via the securityContext field of Pods and Containers. Note: the seccomp annotations are deprecated and will be dropped starting from Kubernetes 1.25.","group":"Settings","required":false,"target":false,"type":"map","variable":"description"},{"default":[],"tooltip":"Define the accecpted profile values for the annotations container.seccomp.security.alpha.kubernetes.io/<container> and seccomp.security.alpha.kubernetes.io/pod.","group":"Settings","label":"Allowed profiles","required":false,"type":"array[","variable":"allowed_profiles"},{"default":[],"tooltip":"Define the allowed values to be set in the seccomp type in the security context of a container or of the Pod.","group":"Settings","label":"Profile types","required":false,"type":"array[","variable":"profile_types"},{"default":[],"tooltip":"Define the allowed localhost profiles. This is used only when the \'Localhost\' type is allowed inside of the security context.","group":"Settings","label":"Localhost profiles","required":false,"type":"array[","variable":"localhost_profiles"}]')},"8b88":function(e,t,a){"use strict";var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[e.isCreate?a("div",{staticClass:"step__values__controls"},[a("ButtonGroup",{attrs:{options:e.YAML_OPTIONS,"inactive-class":"bg-disabled btn-sm","active-class":"bg-primary btn-sm"},model:{value:e.yamlOption,callback:function(t){e.yamlOption=t},expression:"yamlOption"}})],1):e._e(),a("div",{staticClass:"scroll__container"},[a("div",{staticClass:"scroll__content"},[e.showQuestions?[a("Tabbed",{ref:"tabs",staticClass:"step__values__content",attrs:{"side-tabs":!0},on:{changed:function(t){return e.tabChanged(t)}}},[a(e.valuesComponent,{tag:"component",attrs:{mode:e.mode},model:{value:e.chartValues,callback:function(t){e.chartValues=t},expression:"chartValues"}})],1)]:e.isCreate&&!e.showQuestions?[a("YamlEditor",{ref:"yaml",staticClass:"step__values__content",attrs:{scrolling:!0,"initial-yaml-values":e.originalYamlValues,"editor-mode":e.editorMode,"hide-preview-buttons":!0},model:{value:e.yamlValues,callback:function(t){e.yamlValues=t},expression:"yamlValues"}})]:e._e(),a("ResourceCancelModal",{ref:"cancelModal",attrs:{"is-cancel-modal":!1,"is-form":!0},on:{"cancel-cancel":function(t){e.preYamlOption=e.yamlOption},"confirm-cancel":function(t){e.yamlOption=e.preYamlOption}}})],2)])])},i=[],o=a("da25"),r=a("907c"),n=a("c5e6"),l=a("e24b"),u=a("cc2d"),p=a("6860"),c=a("0cb2"),d=a("870a");const f={FORM:"FORM",YAML:"YAML"},h=[{labelKey:"catalog.install.section.chartOptions",value:f.FORM},{labelKey:"catalog.install.section.valuesYaml",value:f.YAML}];var b={name:"Values",props:{mode:{type:String,default:o["C"]},chartValues:{type:Object,required:!0},hasReadme:{type:Boolean,default:!1},value:{type:Object,required:!0}},components:{ButtonGroup:u["a"],ResourceCancelModal:p["a"],Tabbed:c["a"],YamlEditor:d["b"]},async fetch(){try{this.version=this.$store.getters["catalog/version"]({repoType:"cluster",repoName:"kubewarden",chartName:"kubewarden-controller"}),await this.loadValuesComponent()}catch(e){console.error("Unable to fetch Version: "+e)}this.generateYaml()},data(){return{YAML_OPTIONS:h,originalYamlValues:null,showQuestions:!0,showValuesComponent:!1,valuesComponent:null,preYamlOption:f.FORM,yamlOption:f.FORM}},watch:{yamlOption(e,t){switch(e){case f.FORM:this.showQuestions=!0;break;case f.YAML:this.showQuestions=!1;break}}},computed:{editorMode(){return d["a"].EDIT_CODE},isCreate(){return this.mode===o["u"]}},methods:{generateYaml(){var e,t;const a=this.$store.getters["currentStore"](this.value),s=this.$store.getters[a+"/all"](r["y"]),i=null!==(e=this.chartValues)&&void 0!==e&&e.policy?Object(l["e"])(this.chartValues.policy):this.value;this.yamlValues=Object(n["b"])(s,null===(t=this.value)||void 0===t?void 0:t.type,i)},async loadValuesComponent(){var e;null!==(e=this.value)&&void 0!==e&&e.haveComponent("kubewarden/admission")&&(this.valuesComponent=this.value.importComponent("kubewarden/admission"),await this.valuesComponent(),this.showValuesComponent=!0)},tabChanged(){window.scrollTop=0}}},m=b,v=(a("9f59"),a("d802")),g=Object(v["a"])(m,s,i,!1,null,"713f1cd2",null);t["a"]=g.exports},"8ea3":function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy allows you to restrict what repositories, tags, and images pods in your cluster can refer to. The configuration allows you to mix and match several filters: registries, tags, and images. When both an allow list and a reject list is supported, only one can be provided at the same time for that specific filter.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":[],"description":"Allow or reject images coming from a specified registry.","group":"Settings","label":"Registries","target":false,"type":"map","variable":"registries","subquestions":[{"default":[],"group":"Settings","label":"Allow","type":"array[","variable":"registries.allow"},{"default":[],"group":"Settings","label":"Reject","type":"array[","variable":"registries.reject"}]},{"default":[],"description":"Reject a specified tag for all images","group":"Settings","label":"Tags","target":false,"type":"map","variable":"tags","subquestions":[{"default":[],"group":"Settings","label":"Reject","type":"array[","variable":"tags.reject"}]},{"default":[],"description":"Accept or reject a specified image","group":"Settings","label":"Images","target":false,"type":"map","variable":"images","subquestions":[{"default":[],"group":"Settings","label":"Allow","type":"array[","variable":"images.allow"},{"default":[],"group":"Settings","label":"Reject","type":"array[","variable":"images.reject"}]}]')},9391:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"allowed-proc-mount-types-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/allowed-proc-mount-types-psp:v0.1.3","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allow_unmasked_proc_mount_type":false}}}')},9450:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"","namespace":""},"spec":{"policyServer":"","module":"","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{}}}')},"94f8":function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"trusted-repos"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/trusted-repos:v0.1.7","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"registries":{"allow":[""],"reject":[""]},"tags":{"reject":[""]},"images":{"allow":[""],"reject":[""]}}}}')},"9f59":function(e,t,a){"use strict";a("3f62")},a3b9:function(e,t,a){var s=a("5eaa");t=s(!1),t.push([e.i,'.clearfix[data-v-907eecfa]:after,.clearfix[data-v-907eecfa]:before{content:" ";display:table}.clearfix[data-v-907eecfa]:after{clear:both}.list-unstyled[data-v-907eecfa]{margin:0;padding:0;list-style-type:none}.no-select[data-v-907eecfa]{-webkit-user-select:none;-moz-user-select:none;user-select:none}.no-resize[data-v-907eecfa]{resize:none}.hand[data-v-907eecfa]{cursor:pointer;cursor:hand}.fixed[data-v-907eecfa]{table-layout:fixed}.clip[data-v-907eecfa]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.clip[data-v-907eecfa],.force-wrap[data-v-907eecfa]{word-wrap:break-word}.force-wrap[data-v-907eecfa]{white-space:normal}.bordered-section[data-v-907eecfa]{border-bottom:1px solid var(--border);margin-bottom:20px;padding-bottom:20px}.section-divider[data-v-907eecfa]{margin-bottom:20px;margin-top:20px}.step__policies[data-v-907eecfa]{display:flex;flex-direction:column;flex:1;overflow-x:hidden}.step__policies .spacer[data-v-907eecfa]{line-height:2}.filter[data-v-907eecfa]{display:flex;flex-direction:row;justify-content:flex-end;align-self:flex-end}.filter>*[data-v-907eecfa]{margin:10px}.filter[data-v-907eecfa]>:first-child{margin-left:0}.filter[data-v-907eecfa]>:last-child{margin-right:0}.filter__category[data-v-907eecfa]{min-width:200px;height:unset}@media only screen and (min-width:480px){.filter[data-v-907eecfa]{width:100%}}@media only screen and (min-width:1281px){.filter[data-v-907eecfa]{width:75%}}.grid[data-v-907eecfa]{display:flex;justify-content:flex-start;flex-wrap:wrap;margin:0 -10px}@media only screen and (min-width:480px){.grid .subtype[data-v-907eecfa]{width:100%}}@media only screen and (min-width:768px){.grid .subtype[data-v-907eecfa]{width:calc(50% - 20px)}}@media only screen and (min-width:992px){.grid .subtype[data-v-907eecfa]{width:calc(33.33333% - 20px)}}@media only screen and (min-width:1281px){.grid .subtype[data-v-907eecfa]{width:calc(25% - 20px)}}.grid .disabled[data-v-907eecfa]{opacity:.5;cursor:not-allowed}.subtype__badge[data-v-907eecfa]{background-color:var(--darker);padding:4px 5px}.subtype__aware[data-v-907eecfa],.subtype__mutation[data-v-907eecfa],.subtype__signed[data-v-907eecfa]{position:absolute;bottom:5px;padding:0 5px;border:1px solid var(--border)}.subtype__signed[data-v-907eecfa]{left:10px}.subtype__mutation[data-v-907eecfa]{right:10px}.subtype__aware[data-v-907eecfa]{right:30px}',""]),e.exports=t},a5f5:function(e){e.exports=JSON.parse('[{"default":null,"description":"Replacement for the Kubernetes Pod Security Policy that controls the usage of volumes in pods. The policy takes the list of the allowed volume types using the allowedTypes setting. The special value * can be used to allow all kind of volumes.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":[],"description":"","tooltip":"A list of the allowed volume types. Note: no other value can be specified together with *. For example, allowedTypes: [\'*\', \'configMap\'] is not a valid configuration setting.","group":"Settings","label":"Allowed types","required":false,"type":"array[","variable":"allowedTypes"}]')},a779:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"pod-runtime"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/pod-runtime:v0.1.4","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"reservedRuntimes":[""],"fallbackRuntime":"","defaultRuntimeReserved":true}}}')},ad18:function(e,t,a){"use strict";var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.$fetchState.pending?a("Loading",{attrs:{mode:"relative"}}):a("div",[e.value?a("Wizard",{ref:"wizard",staticClass:"wizard",attrs:{errors:e.errors,steps:e.steps,"edit-first-step":!0,"banner-title":e.splitType,"banner-title-subtext":e.typeModule},on:{back:e.reset,cancel:e.done,finish:e.finish},scopedSlots:e._u([{key:"policies",fn:function(){return[a("PolicyGrid",{attrs:{value:e.packages},on:{selectType:function(t){return e.selectType(t)}},scopedSlots:e._u([e.hasArtifactHub?null:{key:"whitelistBanner",fn:function(){return[a("Banner",{staticClass:"type-banner mb-20 mt-0",attrs:{color:"warning"}},[a("div",[a("p",{staticClass:"mb-10"},[e._v(" "+e._s(e.t("kubewarden.policies.noArtifactHub"))+" ")]),a("AsyncButton",{attrs:{mode:"artifactHub"},on:{click:e.addArtifactHub}})],1)])]},proxy:!0},{key:"customSubtype",fn:function(){return[a("div",{staticClass:"subtype",on:{click:function(t){return e.selectType("custom")}}},[a("div",{staticClass:"subtype__metadata"},[a("div",{staticClass:"subtype__badge",style:{"background-color":"var(--darker)"}},[a("label",[e._v(e._s(e.t("kubewarden.customPolicy.badge")))])]),a("h4",{staticClass:"subtype__label"},[e._v(" "+e._s(e.t("kubewarden.customPolicy.title"))+" ")]),a("div",{staticClass:"subtype__description"},[e._v(" "+e._s(e.t("kubewarden.customPolicy.description"))+" ")])])])]},proxy:!0}],null,!0)})]},proxy:!0},{key:"readme",fn:function(){return[e.readme?a("Markdown",{staticClass:"mb-20",attrs:{value:e.readme}}):e._e()]},proxy:!0},{key:"values",fn:function(){return[a("Values",{attrs:{value:e.value,"chart-values":e.chartValues,mode:e.mode}})]},proxy:!0}],null,!1,2262417718),model:{value:e.value,callback:function(t){e.value=t},expression:"value"}}):e._e()],1)},i=[],o=a("7838"),r=a.n(o),n=a("736a"),l=a.n(n),u=a("1fcb"),p=a.n(u),c=a("330a"),d=a.n(c),f=a("42b0"),h=a("305c"),b=a("da25"),m=a("c5e6"),v=a("e24b"),g=a("6418"),y=a("d709"),w=a("15ca"),_=a("56dc"),x=a("ed59"),S=a("465c"),k=a("90cd"),A=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("form",{staticClass:"create-resource-container step__policies"},[e._t("whitelistBanner"),a("div",{staticClass:"filter"},[a("LabeledSelect",{staticClass:"filter__keywords",attrs:{clearable:!0,taggable:!0,mode:e.mode,multiple:!0,label:"Filter by Keyword",options:e.keywordOptions},model:{value:e.keywords,callback:function(t){e.keywords=t},expression:"keywords"}}),a("LabeledSelect",{staticClass:"filter__category",attrs:{clearable:!0,searchable:!1,options:e.resourceOptions,mode:e.mode,multiple:!0,placement:"bottom",label:"Filter by Resource Type"},model:{value:e.category,callback:function(t){e.category=t},expression:"category"}}),a("input",{directives:[{name:"model",rawName:"v-model",value:e.searchQuery,expression:"searchQuery"}],ref:"searchQuery",staticClass:"input-sm filter__search",attrs:{type:"search",placeholder:e.t("catalog.charts.search")},domProps:{value:e.searchQuery},on:{input:function(t){t.target.composing||(e.searchQuery=t.target.value)}}}),a("button",{ref:"btn",staticClass:"btn, btn-sm, role-primary",attrs:{type:"button"},on:{click:e.refresh}},[e._v(" "+e._s(e.t("kubewarden.utils.resetFilter"))+" ")])],1),a("div",{staticClass:"grid"},[e._t("customSubtype"),e._l(e.filteredSubtypes,(function(t){return a("div",{key:t.package_id,staticClass:"subtype",on:{click:function(a){return e.$emit("selectType",t.name)}}},[a("div",{staticClass:"subtype__metadata"},[a("div",{staticClass:"subtype__badge"},[a("label",[e._v(e._s(e.resourceType(t.data["kubewarden/resources"])))])]),t.signed?a("div",{staticClass:"subtype__signed"},[a("i",{directives:[{name:"tooltip",rawName:"v-tooltip",value:e.t("kubewarden.policyCharts.signedPolicy"),expression:"t('kubewarden.policyCharts.signedPolicy')"}],staticClass:"icon icon-checkmark"})]):e._e(),"true"===t.data["kubewarden/mutation"]?a("div",{staticClass:"subtype__mutation"},[a("i",{directives:[{name:"tooltip",rawName:"v-tooltip",value:e.t("kubewarden.policyCharts.mutationPolicy"),expression:"t('kubewarden.policyCharts.mutationPolicy')"}],staticClass:"icon icon-edit"})]):e._e(),"true"===t.data["kubewarden/contextAware"]?a("div",{staticClass:"subtype__aware"},[a("i",{directives:[{name:"tooltip",rawName:"v-tooltip",value:e.t("kubewarden.policyCharts.contextAware"),expression:"t('kubewarden.policyCharts.contextAware')"}],staticClass:"icon icon-show"})]):e._e(),a("h4",{staticClass:"subtype__label"},[e._v(" "+e._s(t.display_name)+" ")]),t.description?a("div",{staticClass:"subtype__description mb-20"},[e._v(" "+e._s(t.description)+" ")]):e._e()])])}))],2)],2)},O=[],R=a("2cb5"),C=a("1d19"),V=a("466b"),M={props:{mode:{type:String,default:b["u"]},value:{type:Array,default:()=>[]}},components:{LabeledSelect:V["a"]},fetch(){const e=this.$route.query;this.category=e[b["b"]]||"",this.searchQuery=e[b["n"]]||""},data(){return{category:null,keywords:[],searchQuery:null}},computed:{filteredSubtypes(){const e=this.value||[],t=e.filter(e=>{var t,a;if(this.category&&(null===(t=e.data)||void 0===t||null===(a=t["kubewarden/resources"])||void 0===a||!a.includes(this.category)))return!1;if(this.searchQuery){const t=this.searchQuery.split(/\s*[, ]\s*/).map(e=>Object(R["e"])(e,!1));for(const a of t){var s;if((null===(s=e.label)||void 0===s||!s.match(a))&&e.description&&!e.description.match(a))return!1}}if(this.keywords)for(const i of this.keywords)if(!e.keywords.includes(i))return!1;return!0});return Object(C["a"])(t,["category","label","description"])},keywordOptions(){var e;const t=null===(e=this.value)||void 0===e?void 0:e.flatMap(e=>e.keywords);return[...new Set(t)]||!1},resourceOptions(){var e;const t=[],a=null===(e=this.value)||void 0===e?void 0:e.flatMap(e=>{var t;return null===(t=e.data)||void 0===t?void 0:t["kubewarden/resources"]});return null===a||void 0===a||a.flatMap(e=>{const a=e.split(",");a.length>1?a.forEach(e=>t.push(e)):t.push(e)}),[...new Set(t)]||!1}},methods:{refresh(){this.category=null,this.keywords=[],this.searchQuery=null},resourceType(e){const t=e.split(",");return t.length>1?"Multiple":"*"===e?"Global":e}}},j=M,P=(a("604d"),a("d802")),q=Object(P["a"])(j,A,O,!1,null,"907eecfa",null),N=q.exports,T=a("8b88"),E={name:"Create",components:{AsyncButton:y["b"],Banner:g["a"],Loading:w["a"],Markdown:_["a"],Wizard:x["a"],PolicyGrid:N,Values:T["a"]},props:{mode:{type:String,default:b["u"]},value:{type:Object,required:!0}},mixins:[f["a"],h["a"]],async fetch(){var e,t,s,i,o,r;if(this.errors=[],this.hasArtifactHub&&await this.getPackages(),!this.chartValues)try{this.questions=await a.e(24).then(a.t.bind(null,"dcb4",3));const e=l()(JSON.parse(JSON.stringify(this.questions)));this.chartValues={questions:e}}catch(n){console.warn("Error importing questions "+n)}this.defaultPolicy=a("9450"),this.yamlValues=Object(m["c"])(this.defaultPolicy),this.value.apiVersion=`${null===(e=this.schema)||void 0===e||null===(t=e.attributes)||void 0===t?void 0:t.group}.${null===(s=this.schema)||void 0===s||null===(i=s.attributes)||void 0===i?void 0:i.version}`,this.value.kind=null===(o=this.schema)||void 0===o||null===(r=o.attributes)||void 0===r?void 0:r.kind},data(){return{errors:null,packages:null,questions:null,repository:null,splitType:null,type:null,typeModule:null,version:null,chartValues:null,yamlValues:null,defaultPolicy:null,hasCustomRegistry:!1,stepPolicies:{hidden:!1,name:"policies",label:"Policies",ready:!1,weight:99},stepReadme:{hidden:!1,name:"readme",label:"Readme",ready:!0,weight:98},stepValues:{name:"values",label:"Values",ready:!0,weight:97}}},watch:{hasCustomRegistry(e,t){t||this.policyQuestions(e)}},computed:{isCreate(){return this.realMode===b["u"]},isSelected(){return!!this.type},hasArtifactHub(){if(this.whitelistSetting){const e=this.whitelistSetting.value.split(","),t=e.includes("artifacthub.io");return t&&this.getPackages(),t}return!1},readme(){if(this.type){var e;const t=null===(e=this.packages)||void 0===e?void 0:e.find(e=>e.name===this.type);return null===t||void 0===t?void 0:t.readme}return null},steps(){const e=[];return e.push(this.stepPolicies,this.stepReadme,this.stepValues),e.sort((e,t)=>t.weight-e.weight)},whitelistSetting(){return this.value.whitelistSetting}},methods:{async addArtifactHub(e){try{await this.value.updateWhitelist("artifacthub.io"),e(!0)}catch(t){this.errors=t,e(!1)}},done(){var e;this.$router.replace({name:"c-cluster-product-resource",params:{cluster:this.$route.params.cluster,product:"kubewarden",resource:null===(e=this.schema)||void 0===e?void 0:e.id}})},async finish(e){try{var t;const{ignoreRancherNamespaces:a}=this.chartValues.policy;a&&(Object(v["i"])(this.chartValues.policy.spec,"namespaceSelector",{matchExpressions:[S["b"]]}),delete this.chartValues.policy.ignoreRancherNamespaces);const s=null!==(t=this.chartValues)&&void 0!==t&&t.policy?this.chartValues.policy:r.a.load(this.yamlValues);p()(this.value,s),await this.save(e)}catch(a){this.errors.push(a)}},async getPackages(){if(this.repository=await this.value.artifactHubRepo(),this.repository&&this.repository.packages.length>0){const t=this.repository.packages.map(e=>this.packageDetails(e));try{this.packages=await Promise.all(t)}catch(e){console.warn("Error fetching packages: "+e)}}},async packageDetails(e){try{return await this.value.artifactHubPackage(e)}catch(t){}},policyQuestions(e){var t,s,i;const o=e?"defaultPolicy":null===(t=this.type)||void 0===t?void 0:t.replace(k["a"].SPOOFED.POLICIES+".","");let r,n;try{r=a("360f")(`./${o}.json`)}catch(l){console.warn("Error when matching policy chart, falling back to default"),r=this.defaultPolicy}if(Object(v["i"])(this.chartValues,"policy",r),null!==(s=r)&&void 0!==s&&null!==(i=s.spec)&&void 0!==i&&i.settings&&!d()(r.spec.settings)){try{n=a("2275")(`./${o}.json`)}catch(l){console.warn("Error when matching policy questions")}n&&Object(v["i"])(this.chartValues.questions,"questions",n)}},reset(){this.$nextTick(()=>{const e=["errors","splitType","type","typeModule","chartValues.policy","yamlValues"];e.forEach(e=>{this[e]=null})})},selectType(e){var t,a;if(this.type=e,"custom"===e)return this.$set(this,"hasCustomRegistry",!0),this.stepReadme.hidden=!0,this.stepPolicies.ready=!0,void this.$refs.wizard.next();this.$router.push({query:{[b["l"]]:"kubewarden",[b["m"]]:"cluster",[b["c"]]:e.replace(k["a"].SPOOFED.POLICIES+".","")}}),this.policyQuestions(),this.stepReadme.hidden=!1,this.stepPolicies.ready=!0,this.$refs.wizard.next(),this.splitType=e.split("policies.kubewarden.io.policies.")[1],this.typeModule=null===(t=this.chartValues)||void 0===t||null===(a=t.policy)||void 0===a?void 0:a.spec.module}}},I=E,D=(a("87a0"),Object(P["a"])(I,s,i,!1,null,"3749e174",null));t["a"]=D.exports},b063:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"readonly-root-filesystem-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/readonly-root-filesystem-psp:v0.1.3","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{}}}')},b275:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"seccomp-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/seccomp-psp:v0.1.1","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowed_profiles":[""],"profile_types":[""],"localhost_profiles":[""]}}}')},ba38:function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy works by defining what host namespaces can be used by a Pod. `allow_host_ipc`, `allow_host_network` and `allow_host_pid` are `false` by default. `allow_host_ports` is an empty list by default. This means that by default host IPC, network, pid and all host ports are disabled when this policy is loaded with no configuration.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":false,"tooltip":"Allows the pod to set .spec.HostIPC to true.","group":"Settings","label":"Allow host IPC","required":false,"type":"boolean","variable":"allow_host_ipc"},{"default":false,"tooltip":"Allows the pod to set .spec.HostNetwork to true.","group":"Settings","label":"Allow host network","required":false,"type":"boolean","variable":"allow_host_network"},{"default":false,"tooltip":"Allows the pod to set .spec.HostPID to true.","group":"Settings","label":"Allow host PID","required":false,"type":"boolean","variable":"allow_host_pid"},{"default":[],"description":"A range of ports to allow, an example would allow host ports `80`, `443` and the range `8000-9000`.","group":"Settings","label":"Allow host ports","target":false,"type":"map","variable":"allow_host_ports","subquestions":[{"default":0,"tooltip":"","group":"Settings","label":"min","type":"int","variable":"allow_host_ports.min"},{"default":0,"tooltip":"","group":"Settings","label":"max","type":"int","variable":"allow_host_ports.max"}]}]')},bad1:function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy is a replacement for the Kubernetes Pod Security Policy that controls the usage of SELinux in the pod security context and on containers, init containers and ephemeral containers. This policy will inspect the `.spec.securityContext.seLinuxOptions` of the pod  if the container has no specific `.spec.securityContext.seLinuxOptions`. In other words, the `seLinuxOptions` of the container, init container and ephemeral containers take precendence over the pod `seLinuxOptions`, if any.","group":"Settings","required":false,"target":false,"type":"map","variable":"description"},{"default":"MustRunAs","tooltip":"Defines what seLinuxOptions can be set at the pod level and at the container level.","group":"Settings","label":"SE Linux Options","options":["MustRunAs","RunAsAny"],"required":false,"type":"enum","variable":"rule"},{"default":[],"description":"Contains the desired value for the `seLinuxOptions` parameter. If the pod does not contain a `.securityContext`, or a `.securityContext.seLinuxOptions`, then this policy acts as mutating and defaults the `seLinuxOptions` attribute to the one provided in the configuration. In all cases, pod containers, init container and ephemeral containers `.seLinuxOptions` are checked for compatibility if they override the Pod Security Context `seLinuxOptions` value.","group":"Settings","label":"Must run as","show_if":"rule=MustRunAs","target":false,"type":"map","variable":"MustRunAs","subquestions":[{"default":"","group":"Settings","label":"User","show_if":"rule=MustRunAs","type":"string","variable":"MustRunAs.user"},{"default":"","group":"Settings","label":"Role","show_if":"rule=MustRunAs","type":"string","variable":"MustRunAs.role"},{"default":"","group":"Settings","label":"Type","show_if":"rule=MustRunAs","type":"string","variable":"MustRunAs.type"},{"default":0,"group":"Settings","label":"Level","show_if":"rule=MustRunAs","type":"int","variable":"MustRunAs.level"}]},{"default":false,"tooltip":"Always accepts the request.","group":"Settings","show_if":"rule=RunAsAny","title":"Run as any","type":"boolean","variable":"RunAsAny"}]')},bb31:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"allowed-fsgroups-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/allowed-fsgroups-psp:v0.1.4","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"rule":"","ranges":[{"min":1000,"max":2000}]}}}')},be44:function(e,t,a){var s={"./example.vue":"ce60","./istio.vue":"826d","./logging/index.vue":"3c69","./monitoring/ClusterSelector.vue":"9d63","./monitoring/StorageClassSelector.vue":"3e15","./monitoring/alerting/index.vue":"72af","./monitoring/grafana/index.vue":"28b8","./monitoring/index.vue":"1c3e","./monitoring/prometheus/index.vue":"0a93","./monitoring/steps/uninstall-v1.vue":"29af","./rancher-alerting-drivers.vue":"ca1f","./rancher-backup/S3.vue":"8b03","./rancher-backup/index.vue":"39f3","./rancher-gatekeeper.vue":"dd1b"};function i(e){var t=o(e);return a(t)}function o(e){if(!a.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}i.keys=function(){return Object.keys(s)},i.resolve=o,e.exports=i,i.id="be44"},c250:function(e){e.exports=JSON.parse('[{"default":true,"description":"This policy works by inspecting the containers and init containers of a Pod. If any of these containers have `allowPrivilegeEscalation` enabled, the Pod will be rejected.","tooltip":"Used to default to disallow, while still permitting pods to request allowPrivilegeEscalation explicitly.","group":"Settings","label":"Allow privilege escalation","required":false,"type":"boolean","variable":"default_allow_privilege_escalation"}]')},c3e9:function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy is a replacement for the Kubernetes Pod Security Policy that controls containers user and groups.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":[],"description":"Controls which user ID the containers are run with.","group":"Settings","label":"Run as user","target":false,"type":"map","variable":"run_as_user","subquestions":[{"default":"","tooltip":"Defines the strategy used by the policy to enforce users and groups used in containers.","group":"Settings","label":"Rule","options":["MustRunAs","MustRunAsNonRoot","RunAsAny"],"type":"enum","variable":"run_as_user.rule"},{"default":false,"group":"Settings","label":"Overwrite","show_if":"run_as_user.rule=MustRunAs||run_as_user.rule=MustRunAsNonRoot","title":"Overwrite","tooltip":"The overwrite attribute can be set only with the MustRunAs rule. This flag configures the policy to mutate the runAsUser or runAsGroup despite of the value present in the request - even if the value is a valid one. The default value of this attribute is false.","type":"boolean","variable":"run_as_user.overwrite"},{"default":[],"description":"Ranges is a list of JSON objects with two attributes: min and max. Each range object define the user/group ID range used by the rule.","group":"Settings","label":"Ranges","show_if":"run_as_user.rule=MustRunAs||run_as_user.rule=MustRunAsNonRoot","target":false,"type":"map","variable":"run_as_user.ranges","subquestions":[{"default":0,"group":"Settings","label":"min","show_if":"run_as_user.rule=MustRunAs||run_as_user.rule=MustRunAsNonRoot","tooltip":"Minimum UID or GID","type":"int","variable":"run_as_user.ranges.min"},{"default":0,"group":"Settings","label":"max","show_if":"run_as_user.rule=MustRunAs||run_as_user.rule=MustRunAsNonRoot","tooltip":"Maxium UID or GID","type":"int","variable":"run_as_user.ranges.max"}]}]},{"default":[],"description":"Controls which primary group ID the containers are run with.","group":"Settings","label":"Run as group","target":false,"type":"map","variable":"run_as_group","subquestions":[{"default":"","tooltip":"Defines the strategy used by the policy to enforce users and groups used in containers.","group":"Settings","label":"Rule","options":["MustRunAs","MustRunAsNonRoot","RunAsAny"],"type":"enum","variable":"run_as_group.rule"},{"default":false,"group":"Settings","label":"Overwrite","show_if":"run_as_group.rule=MustRunAs||run_as_group.rule=MustRunAsNonRoot","type":"boolean","variable":"run_as_group.overwrite"},{"default":[],"description":"Ranges is a list of JSON objects with two attributes: min and max. Each range object define the user/group ID range used by the rule.","group":"Settings","label":"Ranges","show_if":"run_as_group.rule=MustRunAs||run_as_group.rule=MustRunAsNonRoot","target":false,"type":"map","variable":"run_as_group.ranges","subquestions":[{"default":0,"group":"Settings","label":"min","show_if":"run_as_group.rule=MustRunAs||run_as_group.rule=MustRunAsNonRoot","tooltip":"Minimum UID or GID","type":"int","variable":"run_as_group.ranges.min"},{"default":0,"group":"Settings","label":"max","show_if":"run_as_group.rule=MustRunAs||run_as_group.rule=MustRunAsNonRoot","tooltip":"Maxium UID or GID","type":"int","variable":"run_as_group.ranges.max"}]}]},{"default":[],"description":"Controls which group IDs containers add.","group":"Settings","label":"Supplemental groups","target":false,"type":"map","variable":"supplemental_groups","subquestions":[{"default":"","tooltip":"Defines the strategy used by the policy to enforce users and groups used in containers.","group":"Settings","label":"Rule","options":["MustRunAs","MustRunAsNonRoot","RunAsAny"],"type":"enum","variable":"supplemental_groups.rule"},{"default":false,"group":"Settings","label":"Overwrite","show_if":"supplemental_groups.rule=MustRunAs||supplemental_groups.rule=MustRunAsNonRoot","type":"boolean","variable":"supplemental_groups.overwrite"},{"default":[],"description":"Ranges is a list of JSON objects with two attributes: min and max. Each range object define the user/group ID range used by the rule.","group":"Settings","label":"Ranges","show_if":"supplemental_groups.rule=MustRunAs||supplemental_groups.rule=MustRunAsNonRoot","target":false,"type":"map","variable":"supplemental_groups.ranges","subquestions":[{"default":0,"group":"Settings","label":"min","show_if":"supplemental_groups.rule=MustRunAs||supplemental_groups.rule=MustRunAsNonRoot","tooltip":"Minimum UID or GID","type":"int","variable":"supplemental_groups.ranges.min"},{"default":0,"group":"Settings","label":"max","show_if":"supplemental_groups.rule=MustRunAs||supplemental_groups.rule=MustRunAsNonRoot","tooltip":"Maxium UID or GID","type":"int","variable":"supplemental_groups.ranges.max"}]}]}]')},c44b:function(e,t,a){var s=a("5eaa");t=s(!1),t.push([e.i,'.clearfix[data-v-56b7c1bc]:after,.clearfix[data-v-56b7c1bc]:before{content:" ";display:table}.clearfix[data-v-56b7c1bc]:after{clear:both}.list-unstyled[data-v-56b7c1bc]{margin:0;padding:0;list-style-type:none}.no-select[data-v-56b7c1bc]{-webkit-user-select:none;-moz-user-select:none;user-select:none}.no-resize[data-v-56b7c1bc]{resize:none}.hand[data-v-56b7c1bc]{cursor:pointer;cursor:hand}.fixed[data-v-56b7c1bc]{table-layout:fixed}.clip[data-v-56b7c1bc]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.clip[data-v-56b7c1bc],.force-wrap[data-v-56b7c1bc]{word-wrap:break-word}.force-wrap[data-v-56b7c1bc]{white-space:normal}.bordered-section[data-v-56b7c1bc]{border-bottom:1px solid var(--border);margin-bottom:20px;padding-bottom:20px}.section-divider[data-v-56b7c1bc]{margin-bottom:20px;margin-top:20px}[data-v-56b7c1bc] .step-container{height:auto}.step__basic[data-v-56b7c1bc]{display:flex;flex-direction:column;flex:1;overflow-x:hidden}.step__basic .spacer[data-v-56b7c1bc]{line-height:2}.step__values__controls[data-v-56b7c1bc]{display:flex;margin-bottom:15px}.step__values__controls[data-v-56b7c1bc]>:not(:last-of-type){margin-right:10px}.step__values__content[data-v-56b7c1bc],.step__values__controls--spacer[data-v-56b7c1bc]{flex:1}.step__values__content[data-v-56b7c1bc]  .tab-container{overflow:auto}',""]),e.exports=t},c8f2:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"environment-variable-policy"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/environment-variable-policy:v0.1.1","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{}}}')},c9dd:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"sysctl-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/sysctl-psp:v0.1.7","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"forbiddenSysctls":[""],"allowedUnsafeSysctls":[""]}}}')},cd09:function(e){e.exports=JSON.parse('[{"default":"RunAsAny","tooltip":"Set which fsGroup is allowed in the pod security context.","description":"This policy works by defining what `fsGroup` is allowed in the pod security context. `MustRunAs` and `MayRunAs` contain a list of ranges that define valid ranges for the `fsGroup` value. `RunAsAny` always accepts the request.","group":"Settings","label":"Service Type","options":["MustRunAs","MayRunAs","RunAsAny"],"required":false,"type":"enum","variable":"rule"},{"default":[],"tooltip":"Valid user ID (UID) ranges for the fsGroup.","group":"Settings","label":"User ID Ranges","show_if":"rule=MustRunAs||rule=MayRunAs","target":false,"type":"map","variable":"ranges","subquestions":[{"default":1000,"tooltip":"Minimum UID range for fsgroup.","group":"Settings","label":"min","type":"int","variable":"ranges.min"},{"default":2000,"tooltip":"Maximum UID range for fsgroup.","group":"Settings","label":"max","type":"int","variable":"ranges.max"}]}]')},cf89:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"safe-annotations"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/safe-annotations:v0.1.1","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"denied_annotations":[""],"constrained_annotations":[{}]}}}')},d047:function(e){e.exports=JSON.parse('[{"default":null,"description":"This policy validates Sigstore signatures for containers, init container and ephemeral container that match the name provided in the image settings field. It will reject the Pod if any validation fails. If all signature validation pass or there is no container that matches the image name, the Pod will be accepted.","group":"Settings","required":false,"targeted":false,"type":"map","variable":"description"},{"default":"PublicKey","description":"The policy takes a list of signatures. A signature can be of two types: public key or keyless. Each signature has an image field which will be used to select the matching containers in the pod that will be evaluated. image supports wildcard. For example, ghcr.io/kubewarden/* will match all images from the kubewarden ghcr repo.","group":"Settings","label":"Signature Type","options":["PublicKey","Keyless"],"required":false,"type":"enum","variable":"rule"},{"default":[],"description":"","group":"Settings","label":"Public key signature","show_if":"rule=PublicKey","target":false,"type":"map","variable":"signatures","subquestions":[{"default":"","group":"Settings","label":"Image","show_if":"rule=PublicKey","type":"string","variable":"signatures.image"},{"default":[],"group":"Settings","label":"Public keys","show_if":"rule=PublicKey","type":"array[","variable":"signatures.pubKeys"},{"default":[],"group":"Settings","label":"Annotations","show_if":"rule=PublicKey","type":"map[","variable":"signatures.annotations"}]},{"default":[],"group":"Settings","label":"Keyless signature","show_if":"rule=Keyless","target":false,"type":"map","variable":"signatures","subquestions":[{"default":"","group":"Settings","label":"Image","show_if":"rule=Keyless","type":"string","variable":"signatures.image"},{"default":[],"group":"Settings","label":"Keyless","target":false,"show_if":"rule=Keyless","type":"map","variable":"signatures.keyless","subquestions":[{"default":"","group":"Settings","label":"Issuer","show_if":"rule=Keyless","type":"string","variable":"signatures.keyless.issuer"},{"default":"","group":"Settings","label":"Subject","show_if":"rule=Keyless","type":"string","variable":"signatures.keyless.subject"}]},{"default":[],"group":"Settings","label":"Annotations","show_if":"rule=Keyless","type":"map[","variable":"signatures.annotations"}]},{"default":true,"tooltip":"This policy also mutates matching images to add the image digest, therefore the version of the deployed image can\'t change. This mutation can be disabled by setting modifyImagesWithDigest to false.","group":"Settings","label":"modifyImagesWithDigest","required":false,"title":"Modify images with digest","type":"boolean","variable":"modifyImagesWithDigest"}]')},d1d7:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"volumes-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/volumes-psp:v0.1.6","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allowedTypes":[""]}}}')},d72c:function(e,t,a){var s=a("deb7");s.__esModule&&(s=s.default),"string"===typeof s&&(s=[[e.i,s,""]]),s.locals&&(e.exports=s.locals);var i=a("0ed3").default;i("ec60cbca",s,!0,{sourceMap:!1,shadowMode:!1})},dbe7:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"host-namespaces-psp"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/host-namespaces-psp:v0.1.2","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"allow_host_ipc":false,"allow_host_network":false,"allow_host_pid":false,"allow_host_ports":[{"min":0,"max":0}]}}}')},dda8d:function(e){e.exports=JSON.parse('{"apiVersion":"v2","kind":"","metadata":{"name":"ingress"},"spec":{"policyServer":"","module":"ghcr.io/kubewarden/policies/ingress:v0.1.11","rules":[{"apiGroups":[],"apiVersions":[],"resources":[],"operations":[]}],"mutating":false,"settings":{"requireTLS":false,"allowPorts":[],"denyPorts":[]}}}')},deb7:function(e,t,a){var s=a("5eaa");t=s(!1),t.push([e.i,'.clearfix[data-v-3749e174]:after,.clearfix[data-v-3749e174]:before{content:" ";display:table}.clearfix[data-v-3749e174]:after{clear:both}.list-unstyled[data-v-3749e174]{margin:0;padding:0;list-style-type:none}.no-select[data-v-3749e174]{-webkit-user-select:none;-moz-user-select:none;user-select:none}.no-resize[data-v-3749e174]{resize:none}.hand[data-v-3749e174]{cursor:pointer;cursor:hand}.fixed[data-v-3749e174]{table-layout:fixed}.clip[data-v-3749e174]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.clip[data-v-3749e174],.force-wrap[data-v-3749e174]{word-wrap:break-word}.force-wrap[data-v-3749e174]{white-space:normal}.bordered-section[data-v-3749e174]{border-bottom:1px solid var(--border);margin-bottom:20px;padding-bottom:20px}.section-divider[data-v-3749e174]{margin-bottom:20px;margin-top:20px}[data-v-3749e174] .step-container{height:auto}[data-v-3749e174] .subtype{height:110px;margin:10px;position:relative;border-radius:calc(var(--border-radius)*1.5);border:1px solid var(--border);text-decoration:none!important;color:var(--body-text)!important}[data-v-3749e174] .subtype:hover:not(.disabled){box-shadow:0 0 30px var(--shadow);transition:box-shadow .1s ease-in-out;cursor:pointer;text-decoration:none!important}[data-v-3749e174] .subtype__metadata{padding:10px}[data-v-3749e174] .subtype__metadata__description,[data-v-3749e174] .subtype__metadata__label{padding-right:20px}[data-v-3749e174] .subtype__badge{position:absolute;right:0;top:0;padding:4px 5px;border-bottom-left-radius:var(--border-radius)}[data-v-3749e174] .subtype__badge label{font-size:12px;line-height:12px;text-align:center;display:block;white-space:no-wrap;text-overflow:ellipsis;color:var(--app-rancher-accent-text);margin:0}[data-v-3749e174] .subtype__label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-bottom:4px;line-height:normal}[data-v-3749e174] .subtype__description{margin-right:10px;display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:3;line-clamp:3;overflow:hidden;text-overflow:ellipsis;color:var(--input-label)}',""]),e.exports=t},e1ff:function(e,t,a){"use strict";a.r(t);var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.isCreate?a("Create",{attrs:{value:e.value,mode:e.mode}}):a("CruResource",{attrs:{resource:e.value,mode:e.realMode},on:{finish:e.finish}},[a("Config",{attrs:{value:e.value,mode:e.mode}})],1)},i=[],o=a("da25"),r=a("42b0"),n=a("305c"),l=a("fd5f"),u=a("edaa"),p=a("ad18"),c={name:"ClusterAdmissionPolicy",props:{value:{type:Object,required:!0},mode:{type:String,default:o["w"]},realMode:{type:String,default:o["w"]}},components:{CruResource:l["a"],Config:u["a"],Create:p["a"]},mixins:[r["a"],n["a"]],async fetch(){await this.fetchChart()},provide(){return{chartType:this.value.type}},computed:{isCreate(){return this.realMode===o["u"]}},methods:{async finish(e){try{await this.save(e)}catch(t){this.errors.push(t)}}}},d=c,f=a("d802"),h=Object(f["a"])(d,s,i,!1,null,null,null);t["default"]=h.exports},edaa:function(e,t,a){"use strict";var s=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("Values",{attrs:{value:e.value,"chart-values":e.chartValues,mode:e.mode}})},i=[],o=a("da25"),r=a("8b88"),n={name:"Config",props:{mode:{type:String,default:o["C"]},value:{type:Object,required:!0}},components:{Values:r["a"]},async fetch(){var e;this.chartValues={policy:this.value,questions:null};let t=null;null!==(e=this.value.spec)&&void 0!==e&&e.settings&&(t=await this.value.policyQuestions(),this.chartValues.questions={questions:t})},data(){return{chartValues:null}}},l=n,u=a("d802"),p=Object(u["a"])(l,s,i,!1,null,null,null);t["a"]=p.exports},f91a:function(e,t,a){var s=a("5eaa");t=s(!1),t.push([e.i,'.clearfix[data-v-713f1cd2]:after,.clearfix[data-v-713f1cd2]:before{content:" ";display:table}.clearfix[data-v-713f1cd2]:after{clear:both}.list-unstyled[data-v-713f1cd2]{margin:0;padding:0;list-style-type:none}.no-select[data-v-713f1cd2]{-webkit-user-select:none;-moz-user-select:none;user-select:none}.no-resize[data-v-713f1cd2]{resize:none}.hand[data-v-713f1cd2]{cursor:pointer;cursor:hand}.fixed[data-v-713f1cd2]{table-layout:fixed}.clip[data-v-713f1cd2]{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.clip[data-v-713f1cd2],.force-wrap[data-v-713f1cd2]{word-wrap:break-word}.force-wrap[data-v-713f1cd2]{white-space:normal}.bordered-section[data-v-713f1cd2]{border-bottom:1px solid var(--border);margin-bottom:20px;padding-bottom:20px}.section-divider[data-v-713f1cd2]{margin-bottom:20px;margin-top:20px}.step__values__controls[data-v-713f1cd2]{display:flex;margin-bottom:15px}.step__values__controls[data-v-713f1cd2]>:not(:last-of-type){margin-right:10px}.step__values__content[data-v-713f1cd2],.step__values__controls--spacer[data-v-713f1cd2]{flex:1}.step__values__content[data-v-713f1cd2]  .tab-container{overflow:auto}',""]),e.exports=t}}]);
//# sourceMappingURL=kubewarden-0.1.7.umd.min.edit.js.map